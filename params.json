{"name":"Juqst","tagline":"JUlia Quantum Simulator Toolbox","body":"# Juqst: JUlia Quantum Simulator Toolbox\r\n##Beginning of a quantum simulator toolbox, primarily written in the Julia Language\r\n\r\n###Done:\r\n\r\n* Implement the simulation of Stabiliser Circuits (Aaronson/Gottesman arXiv:quant-ph/0406196)\r\n* Implement ability to select an arbitrary Clifford group element (Koenig/Smolin arXiv:quant-ph/1406.2170) (not quite complete - phases not implemented properly yet)\r\n* Implement the ability to decompose an arbitrary clifford unitary into a quantum circuit consistiting of hadamard, phase and two-qubit cnot gates.(Aaronson/Gottesman arXiv:quant-ph/0406196)\r\n* Draw the quantum circuit resulting from the decomposition of the clifford/unitary\r\n###Working on:\r\n\r\n\r\n- Shadow the stabiliser state with the exact density matrix representing the state (the **\"base representation\"**)\r\n- Output the \"ket\" state represented by the  (Aaronson/Gottesman arXiv:quant-ph/0406196) tabelau (the **\"tableau\"**)\r\n- Integrate earlier work pre-defining the steane code generators and logical operators, allowing an arbitrary qubit to be projected into a steane code stabilised state.\r\n\r\n###To do:\r\n- randomised benchmarking from arbitrary cliffords\r\n- introduce the ability to add noise at the level of the \"base representation\" as well as in the stabilised state\r\n- explore noisy quantum channels\r\n- integrate tomography work\r\n\r\n# To install\r\n\r\nThis has been developed on Julia 3.0. Currently there are two files that need to be loaded.\r\n\r\nMove to the directory containing these files \r\n\r\n    cd(\"juqst\")\r\n\r\nThen \r\n\r\n    require(\"Initial.jl\")\r\n\r\nand \r\n\r\n    require(\"Symplectic.jl\")\r\n\r\n\r\n# Sample use\r\n\r\n## Stabiliser Circuits\r\n\r\n    state = setup(number_ofQubits)\r\n\r\nprepares the stabiliser state for the correct number of qubits in the |000..000> basis state\r\n\r\nThe state is represented internally as a matrix of the form:\r\n\r\n<TO BE INSERTED>\r\n\r\nCurrently I am just using Int32 Arrays, although binary arrays would save space (if it ever becomes necessary).\r\n\r\n    output(state)\r\n\r\nPrints the state in a human readable form. The states above the line are the 'destabiliser' state, below the line are the 'stabiliser' states. \r\n\r\nSo in a 3 qubit system the initial state of |000> is coded as \r\n\r\n```\r\nXII\r\nIXI\r\nIIX\r\n---\r\nZII\r\nIZI\r\nIIZ\r\n```\r\n\r\nThe following commands are defined\r\n\r\n    hadamard(state,qubit)  # apply a hadamard to the relevant qubit\r\n    phase(state,qubit)     # apply a phase gate to the relevant qubit\r\n    cnot(state,control,target) # apply a controlled not from control qubit to target qubit\r\n\r\nOutput of the resultant state can be supressed by adding an extra false parameter\r\n\r\n    hadamard(state,qubit,false) # hadamard as before, but supress output\r\n\r\n**NOTE! that these commands alter the state passed into them. I have broken Julia convention which requires functions \r\nwith side effects to be written thus - hadamard!(state,qubit).**\r\n\r\n## Arbitrary cliffords\r\n\r\n(Koenig/Smolin arXiv:quant-ph/1406.2170)\r\n\r\nThe idea behind this paper is that we can implement a one-to-one mapping between the cliffords and an integer (plus a random phase string).\r\n\r\nThe mapping is as follows:\r\n\r\n<img src=\"Clifford Mapping.png\">Koenig/Smolin arXiv:quant-ph/1406.2170</img>\r\n\r\nWe can generate the alpha,beta,gamma and delta via\r\n\r\n   symplectic(i,n) # i = integer represting the clifford, n is the number of qubits\r\n\r\nWhich returns the nxn arrays (alpha->delta) coded as follows:\r\n\r\n<img src=\"coding.png\">Koenig/Smolin arXiv:quant-ph/1406.2170</img>\r\n\r\nMore usefully these can be placed into a stabiliser tableau (that is the equivlent of passing the state |0000> through a gate that implements the unitary in question as follows:\r\n\r\n    stabiliseSymp(symp) # where symp is the symplectic of the clifford generated.\r\n\r\ne.g.\r\n\r\n    state = stabiliseSymp(symplectic(23,4)) # for the tableau of clifford '23' in a 4 qubit system\r\n\r\nOf course there are actually 4^n versions of of symplectic 23 (here n = 4), because of the different phases that we can have - this will be implemented shortly.\r\n\r\n# Decomposing a tableau (such as clifford)\r\n\r\nThis will be made more general, but just now it decomposes an arbitrary clifford\r\n\r\n    decompose(clifford_number, qubits)\r\n\r\nThis prints out the elementary gates that would reconstruct the relevant clifford unitary.\r\n\r\nThe commands are stored as string in the vector commands\r\nThe commands are also stored as Julia code in the vector executeCommands (so you can for instance execute them to re-create the tableau)\r\n\r\n# Draw the circuit\r\n\r\nThis is a bit more involved, just now I am using IJulia to provide the rich notebook needed to see the circuit.\r\n\r\nTo install IJulia, full instructions can be found here: https://github.com/JuliaLang/IJulia.jl but the summary is this\r\n\r\n- You need to have installed ipython, simplest way to do this is install pip if you haven't already and then\r\n\r\n     sudo pip install ipython[all]\r\n\r\nYou might also want to install scipy and numpy whilst you are at it, I am going to use them sometime (fer sure)\r\n\r\n- Then from within julia \r\n\r\n    Pkg.add(\"IJulia\")\r\n\r\n  If there are any errors fix it and Pkg.build(\"IJulia\") until it builds (it will!)\r\n\r\n````\r\n  using IJulia\r\n  notebook()\r\n````\r\ngets it up and running.\r\n\r\nYou will also need from within Julia to add the ImageView package Pkg.add(\"ImageView\")\r\n\r\nHere is a sample IJulia session showing how to use the new drawcircuit functionality.\r\n\r\nHTML -> download and open with browser (clicking just gives source just now) [IJulia example notebook](./Example of Draw Circuit.html)\r\nPDF -> should render fine in browser [IJulia pdf of example notebook](./Notebook.pdf)\r\n\r\n    getState(state) \r\n\r\nIs a simple funciton that returns the state the tableau is in vis-a-vis the Aarosnon/Gottesman decomposition algorithm.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}